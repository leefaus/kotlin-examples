import org.jetbrains.kotlin.gradle.plugin.KotlinPlatformType

buildscript {
    repositories {
        jcenter()
        mavenLocal()
    }
    dependencies {
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.10.0"
    }
}

plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.50'
}

repositories {
    jcenter()
    mavenLocal()
}

group 'org.test'
version '1.0-SNAPSHOT'

kotlin {
    jvm() // Create a JVM target with the default name 'jvm'
    js()
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
            }
        }
        jsMain {
            dependencies{
                implementation "org.jetbrains.kotlin:kotlin-stdlib-js"
            }
        }
        jvmMain {
            dependencies {
                implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.0-M2")
                implementation kotlin('stdlib-jdk8')
            }
        }
    }
}



apply plugin: 'org.jetbrains.dokka'

afterEvaluate { // configuration in afterEvaluate, because we want to manually extract the classpath
                // from the kotlin-multiplatform plugin after its configuration (in `customName` closure)
    dokka {
        outputDirectory = "$buildDir/dokka"
        outputFormat = "html"

        multiplatform {
            js {} // this platform uses autoconfiguration. Sources are fetched from kotlin-multiplatform plugin

            customName { // the name is different than `jvm` in Kotlin plugin, so
                // sourceRoots, classpath, platform and targets must be passed explicitly
                targets = ["JVM"]
                platform = "jvm"
                sourceRoot {
                    path = kotlin.sourceSets.getByName("jvmMain").kotlin.srcDirs.first().toString()
                }
                sourceRoot {
                    path = kotlin.sourceSets.getByName("commonMain").kotlin.srcDirs.first().toString()
                }

                // we don't use autoconfiguration for this platform so we need to pass the classpath manually
                // otherwise we'll end up with <ERROR CLASS> markers
                classpath = kotlin.targets
                        .findAll { it.platformType == KotlinPlatformType.common || it.platformType == KotlinPlatformType.jvm }
                        .collect { target ->
                            target.compilations.getByName("main").compileDependencyFiles.files.collect { it.path }
                        }
                        .flatten()
            }

            common {} // this platform uses autoconfiguration

            global {  // this is a special block for passing perPackageOptions,
                // externalDocumentationLinks and sourceLinks to all other platforms
                perPackageOption { // suppress a package on all platforms
                    prefix = "shouldbesuppressed"
                    suppress = true
                }
            }
        }
    }
}